// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique
  password  String
  role      Role    @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
  CUSTOMER
}

model Product {
  id             String   @id @default(uuid()) 
  name           String   @unique
  description    String?
  sku            String   @unique 
  barcode        String?  
  categoryId     String?
  category       Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  brand         String?
  supplierId     String?
  supplier       Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  price          Decimal
  costPrice      Decimal  
  stock          Int      @default(0)
  stockAlert     Int      @default(10) 
  warehouseId    String?
  warehouse      Warehouse? @relation(fields: [warehouseId], references: [id], onDelete: SetNull)
  images         String[] 
  status         ProductStatus @default(ACTIVE)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  orderItems     OrderItem[]  
  inventory      Inventory[]
  stockMovements StockMovement[]
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  parentId  String?  
  image     String?  
  parent    Category? @relation("CategorySelfRelation", fields: [parentId], references: [id])
  children  Category[] @relation("CategorySelfRelation")
  products  Product[]
  createdAt DateTime @default(now())
}


model Supplier {
  id          String   @id @default(uuid())
  name        String
  email       String?  @unique
  phone       String?
  address     String?
  products    Product[]
  createdAt   DateTime @default(now())
}

model Warehouse {
  id          String   @id @default(uuid())
  name        String   @unique
  location    String?
  products    Product[]
  createdAt   DateTime @default(now())
  inventory   Inventory[]
}

model Customer {
  id          String   @id @default(uuid())
  name        String
  email       String?  @unique
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

   orders      Order[]  
}


model Order {
  id          String    @id @default(uuid()) 
  orderNumber String    @unique
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  totalAmount Decimal
  status      OrderStatus @default(PENDING)
  paymentMethod  PaymentMethod?  // NEW FIELD (Cash, Card, etc.)
  paymentStatus  PaymentStatus?  // NEW FIELD (Pending, Paid)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  
}

model OrderItem {
  id         String   @id @default(uuid()) 
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity   Int
  price      Decimal
  total      Decimal
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}


model Inventory {
  id            String   @id @default(uuid())
  productId     String   @unique
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouseId   String?
  warehouse     Warehouse? @relation(fields: [warehouseId], references: [id], onDelete: SetNull)
  stock         Int      @default(0)
  stockAlert    Int      @default(10) // Notify when stock is low
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model StockMovement {
  id            String   @id @default(uuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  type          StockMovementType
  quantity      Int
  reason        String?
  createdAt     DateTime @default(now())
}

enum StockMovementType {
  INCREASE  // Stock added (purchase, restock)
  DECREASE  // Stock reduced (sale, damage, return)
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
